/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'

export function Scene(props) {
  const { nodes, materials } = useGLTF('/bobblet.glb')

  const [active, setActive] = useState(false)

  const copyBoardMat = materials.Board.clone()
  copyBoardMat.transparent = true
  useEffect(() => {
    copyBoardMat.opacity = active ? 1 : 0.5
  }, [active])
  
  // make buttons (boxes) for each board cell
  const boardWidth = 1.55; const boardDepth = 1.55;
  const boardWidthDif = 1.035; const boardDepthDif = 1.035
  const boardHeight = 0.85
  const createButtons = () => {
    const buttons = []
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        buttons.push(
          <mesh 
            key={`${i} ${j}`} 
            position={new THREE.Vector3(boardWidth - i * boardWidthDif, boardHeight, boardDepth - j * boardDepthDif)}
            onClick={(e) => {
              e.stopPropagation()
              console.log(`${i} ${j}`);
            }}
          >
            <boxGeometry args={[0.75,0.1,0.75]}/>
            <meshBasicMaterial color={"red"}/>
          </mesh>
        )
      }
    }
    return buttons
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        onClick={(e) => {setActive(!active)}}
        geometry={nodes.Board.geometry}
        material={copyBoardMat}
        position={[0, 0.409, 0]}
      />
      <group>
        {createButtons()}
      </group>
      {/* <mesh castShadow receiveShadow geometry={nodes.Table.geometry} material={materials.Table} /> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BlackStackRef2.geometry}
        material={materials.BlackPiece}
        position={[0, 0.598, 3.5]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BlackStackRef3.geometry}
        material={materials.BlackPiece}
        position={[1.107, 0.598, 3.5]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BlackStackRef1.geometry}
        material={materials.BlackPiece}
        position={[-1.189, 0.598, 3.5]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WhiteStackRef1.geometry}
        material={materials.WhitePiece}
        position={[-1.189, 0.598, -3.146]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WhiteStackRef3.geometry}
        material={materials.WhitePiece}
        position={[1.107, 0.598, -3.146]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WhiteStackRef2.geometry}
        material={materials.WhitePiece}
        position={[0, 0.598, -3.146]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.White1.geometry}
        material={materials.WhitePiece}
        position={[-1.542, 1.181, -1.535]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.White2.geometry}
        material={materials.WhitePiece}
        position={[-0.516, 1.326, -1.535]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.White3.geometry}
        material={materials.WhitePiece}
        position={[0.511, 1.399, -1.535]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.White4.geometry}
        material={materials.WhitePiece}
        position={[1.537, 1.417, -1.535]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Black1.geometry}
        material={materials.BlackPiece}
        position={[-1.542, 1.181, 1.533]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Black2.geometry}
        material={materials.BlackPiece}
        position={[-0.516, 1.326, 1.533]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Black3.geometry}
        material={materials.BlackPiece}
        position={[0.511, 1.399, 1.533]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Black4.geometry}
        material={materials.BlackPiece}
        position={[1.537, 1.417, 1.533]}
      />
    </group>
  )
}

useGLTF.preload('/bobblet.glb')